------------------------------------------------------------
==> GIT:
     >> git is distributed version control system.
     >> git is free and open source.
     >> github is a source for project & sources [gitlab, bitbucket ...].
     >> github simplify using git.
     >> you can use git without github.
     >> git has gui.
------------------------------------------------------------
==> why you must learn git??
      >> developers contribute to the same project.
      >> you can revert changes.
      >> you can collaborate to fix issues.
      >> you can collaborate to create now feature.
      >> you can solve conflicts.
      >> you can organize features.
------------------------------------------------------------
==> words!!
      >> repository.
      >> branch.
      >> local repo.
      >> remote repo.
      >> commit (snapshot & checkpoint in your local repo).
      >> clone (from local or remote repo).
      >> push (upload local changes to remote repo).
      >> pull (you pull changes fom remote to local repo).
      >> pull request (tell other about your changes to pull it to remote repo).
------------------------------------------------------------
==> important notes:
      >> create repository for every project.
      >> create a new branch for every feature & enhancement.
      >> no need to connect to remote repo when working.
      >> any one can push & pull depend on permissions..
------------------------------------------------------------
==> md >> markdown language.
        >> heading by [#].
------------------------------------------------------------
==> git cycle:
  |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|
  |                                    << GIT CYCLE >>                                        |
  |  __________________        _____________          ___________                ___________  |
  | |working  directory|      |staging  area|        |local  repo|              |remote repo| |
  |  ‾‾‾‾‾‾‾|‾|‾‾‾‾‾‾‾‾        ‾‾‾‾‾|‾|‾‾‾‾‾          ‾‾‾‾|‾|‾‾‾‾                ‾‾‾‾|‾|‾‾‾‾  |
  |         | |       git add       | |     git commit    | |                        | |      |
  |         | |-------------------->| |------------------>| |                        | |      |
  |         | |                     | |                   | |                        | |      |
  |         | |      git reset      | |                   | |                        | |      |
  |         | |<--------------------| |                   | |        git push        | |      |
  |         | |                     | |                   | |----------------------->| |      |
  |         | |    git checkout     | |                   | |                        | |      |
  |         | |<------------------------------------------| |        git fetch       | |      |
  |         | |                     | |                   | |<-----------------------| |      |
  |         | |      git merge      | |                   | |                        | |      |
  |         | |<------------------------------------------| |                        | |      |
  |         | |                     | |                   | |                        | |      |
  |         | |                     | |     git pull      | |                        | |      |
  |         | |<---------------------------------------------------------------------| |      |
  |         |_|                     |_|                   |_|                        |_|      |
  |___________________________________________________________________________________________|
------------------------------------------------------------
# GIT command:
    => git clone [repo link]                                => to fetch repo form remote repo.
    => git config --global user.name "username"             => set your user name.
    => git config --global user.email "email"               => set your user name.
    => git config --global --list                           => get username and email.
    => git config --global --edit                           => edit by editor.
    => git status                                           => find status for your files.
    => git add [your files, *]                              => send file to staging area.
    => git reset [your files, *]                            => down from staging area.
    => git commit -m "created main structure"               => send for staging area to local repo.
    => git branch                                           => get branch name.
    => git remote                                           => get remote name.
    => git push [remote name] [branch name]                 => send form local to remote. [-u >> pull then push].
    => git pull [remote name]                               => get changes form remote & marge with local.
    => git config --list                                    => to git configuration.
    => git help config                                      => browse manual page.
    => git init                                             => initialized empty repo ".git" file.
    => git branch branchname                                => make new branch.
    => git checkout branchname                              => select branch.
    => git branch -d branchname                             => delete branch.
    => git branch -D branchname                             => force delete.
    => git checkout -b branchname                           => make & select new branch.
    => git branch -M newbranchname                          => change current branchname.
    => git merge anotherbranchname                          => marge another branch to selected.
    => git stash                                            => save staging area files in stash.
    => git stash list                                       => show stash.
    => git stash pop                                        => get from stash to staging area.
    => git stash save "text"                                => save in stash with message.
    => git stash apply                                      => copy not get.
    => git stash pop stash@{n}                              => select ele in stash
    => git stash drop stash@{n}                             => delete element.
    => git stash show                                       => show element.
    => git stash clear                                      => clear stash.
    => git restore --staged filename                        => down file.
    => git clean -n                                         => show deleted files in working directory.
    => git clean -f                                         => delete files.
    => git log                                              => to git commit hash.
    => git reset --soft last_hash                           => delete without changes.
    => git reset --hard last_hash                           => delete with changes.
    => git push origin main --force                         => force update.
    => git reset --hard selected_hash                       => select head and delete all top commit.
    => git tag vn.n                                         => set tag for project.
    => git push [remote name] vn.n                          => push tap.
    => git tag -a vn.n -m "second version from our project" => set version by message.
    => git tag -l "v1.*"                                    => tag search.
    => git tag -d vn.n                                      => delete local tag.
    => git push origin -d vn.n                              => delete remote tag.

# public key:
    => ssh-keygen -t algorism -b num -C "your email"   => to generate key. [rsa, 4096]
    => ssh -T git@github.com                           => use key.
    => when you use ssh you can make new repo from command:
        - git remote add origin git@github.com:username/reponame.git
    => without ssh:
        - git remote add origin https://github.com/username/reponame.git

# alias:
    => git config -global alias.st "config --list"

# Ignore files or dir:
    => .gitignore |*.log       |
                  |!vip.log    |
                  |node_packs  |
                  |........    |
                  |____________|

    => to add ignore file use flag "-f".

# tagging use in versions:
    => set version for your project by tags.
